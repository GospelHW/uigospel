package com.amen.gospel.runner;

import java.util.ArrayList;
import java.util.List;

import android.annotation.SuppressLint;
import android.graphics.Rect;
import android.os.HandlerThread;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;

import com.android.uiautomator.core.EventListener;
import com.android.uiautomator.core.ShellUiAutomatorBridge;
import com.android.uiautomator.core.UiAutomationShellWrapper;
import com.android.uiautomator.core.UiDevice;
import com.android.uiautomator.core.UiObject;
import com.android.uiautomator.core.UiSelector;
import com.amen.gospel.log.Logger;
import com.amen.gospel.model.NodeInfo;
import com.amen.gospel.model.RecordInfo;
import com.amen.gospel.utils.RecordAction;
import com.amen.gospel.utils.RecordManager;
import com.amen.gospel.utils.Utils;

/**
 * @author syl 20170525 手机驱动器
 */
@SuppressLint("NewApi")
public class UiAutomatorRunner {

	private static String TAG = "robot_UiAutomatorRunner";
	public static String appName = "SoftRobot";

	public static boolean bRecord = false;
	private final Object mLock = new Object();
	// 是否启动录制
	public static boolean isStartRecord = false;
	private static boolean isScrollFind = false;// 是否是滑动查找控�?
	private static boolean isUpDownScroll = false;
	private static boolean isLeftRightScroll = false;

	//
	private List<NodeInfo> curWindowNodeInfo = new ArrayList<NodeInfo>();
	private List<AccessibilityNodeInfo> WinRootNodesList = new ArrayList<AccessibilityNodeInfo>();
	private List<List<NodeInfo>> WindowsNodeInfo = new ArrayList<List<NodeInfo>>();

	private static UiAutomatorRunner uiAutomatorRunner;
	private static HandlerThread handlerThread;
	private static UiAutomationShellWrapper uiAutomationShellWrapper;

	/*
	 * mMonkey设置为true时，在调用uiautomator后会导致手机侧的有些view控件不能正常被点击；
	 * 比如：切换语�?、开发�?��?�项、联系人设置中的"联系人显�?"�?
	 */
	private boolean mMonkey = false;
	private UiEventListener listener;
	private static UiDevice uiDevice;

	// zwx235140 2016/6/13
	private static UiObject mUiObject = null;

	// 记录是否产生了第�?次有效的点击
	// 只有产生并缓存了第一条记录之后，才可以开始缓存其他记�?
	public static boolean clickFirst = false;

	public static UiAutomatorRunner getInstance() {
		Logger.i(TAG, "invoke UiAutomatorRunner getInstance,pid:"
				+ android.os.Process.myPid());
		if (uiAutomatorRunner == null) {
			Logger.i(TAG, "uiAutomatorRunner Instance == null");
			uiAutomatorRunner = new UiAutomatorRunner();

		}
		/*
		 * 处理N版本存在弹框后再次无法点击界面控件问题， 获取根节点失败后，重置相关连�?
		 */
		// ###########Begin zwx235140 2016/6/13##########
		else {
			/*
			 * 在连接成功之后，有出现非代码操作导致的连接断�? uiAutomatorRunner 不为null，但实际已断�?
			 * 20160827
			 */
			if (uiAutomationShellWrapper != null
					&& !uiAutomationShellWrapper.isConnected()) {
				// 连接已异常断连，先重置连�?
				Logger.i(TAG,
						"the uiautomation connection is broken.Reconnect it.");
				resetRunner();
			}

			if (mUiObject == null) {
				mUiObject = new UiObject(new UiSelector());
			}

			if (mUiObject.getRootNode() == null) {
				Logger.i(TAG, "root node is null! reset UiAutomatorRunner!");
				resetRunner();
			}
		}
		// ###########End zwx2351402016/6/13##########
		return uiAutomatorRunner;
	}

	public static void resetRunner() {
		Logger.i(TAG, "reset UiAutomatorRunner!");
		if (uiAutomatorRunner != null) {
			if (uiAutomationShellWrapper != null) {
				try {
					uiAutomationShellWrapper.disconnect();
				} catch (Exception e) {
					Logger.e(TAG, "disconnect error. " + e.getMessage());
				}
			}
			if (handlerThread != null) {
				handlerThread.quit();
			}
			uiAutomatorRunner = null;
			uiAutomatorRunner = new UiAutomatorRunner();
		}
	}

	public UiAutomatorRunner() {
		start();
	}

	public boolean initialize() {
		Logger.i(TAG, "invoke initialize uiAutomatorRunner");
		if (uiAutomatorRunner == null) {
			Logger.i(TAG, "uiAutomatorRunner==null");
			start();
		}
		return true;
	}

	public boolean start() {
		Logger.i(TAG, "invoke start UiAutomatorHandlerThread");
		try {
			handlerThread = new HandlerThread("UiAutomatorHandlerThread");
			handlerThread.setDaemon(true);
			handlerThread.start();

			uiAutomationShellWrapper = new UiAutomationShellWrapper();

			Logger.i(TAG, " UiAutomationShellWrapper.connect() begin");
			uiAutomationShellWrapper.connect();
			Logger.i(TAG, " UiAutomationShellWrapper.connect() end");

			uiAutomationShellWrapper.setRunAsMonkey(mMonkey);
			uiDevice = UiDevice.getInstance();
			uiDevice.initialize(new ShellUiAutomatorBridge(
					uiAutomationShellWrapper.getUiAutomation()));

			/**
			 * 解决问题: 3、联系人模块，桌面快捷方式点击进入信息模块，
			 * commom下的checkIfTextExist和checkIfIdExist和modle下的checkWidget�?查有问题
			 * ，使用这三个方法�?查都失败，并且在短信界面输入8
			 */
			// UiWatcherManager.registerWatcher(uiDevice);
			// uiDevice.runWatchers();

			// Logger.i(TAG, "addEventListener");
			// listener = new UiEventListener();
			// uiDevice.addEventListener(listener);
			Logger.i(TAG, "UiAutomatorRunner initialize ok");
			return true;
		} catch (Exception localException) {
			Logger.e(
					"UiAutomatorRunner start ERROR!",
					localException.getClass() + ":"
							+ localException.getMessage() + ".getCause:"
							+ localException.getCause());
			// uiAutomatorRunner = null;
		}

		return false;
	}

	public void stop() {
		uiDevice.removeEventListener(listener);
		uiAutomationShellWrapper.disconnect();
		handlerThread.quit();
		uiAutomatorRunner = null;
	}

	public void addListener() {
		if (listener == null) {
			listener = new UiEventListener();
			uiDevice.addEventListener(listener);
		}
	}

	public void removeListener() {
		if (listener != null) {
			uiDevice.removeEventListener(listener);
			listener = null;
		}
	}

	public UiDevice getUiDevice() {
		return uiDevice;
	}

	public void setUiDevice(UiDevice uiDevice) {
		UiAutomatorRunner.uiDevice = uiDevice;
	}

	@SuppressLint("DefaultLocale")
	private class UiEventListener implements EventListener {

		private String first_click_event_packname = "";

		@Override
		public void onAccessibilityEvent(AccessibilityEvent event) {

			if (!bRecord) {
				Logger.i(TAG, "record already stoped!");
				return;
			}
			// 过滤掉录制界面的任何事件
			if ((event.getPackageName() != null)
					&& (event.getPackageName().equals("com.amen.gospel"))) {
				return;
			}
			synchronized (mLock) {
				Logger.i(TAG, "EventTpye---------------" + event.toString());

				// Logger.i(TAG,
				// "robottest receive a AccessibilityEvent------------: "
				// + event.toString());

				int eventType = event.getEventType();
				String eventName = AccessibilityEvent
						.eventTypeToString(eventType);
				Logger.i(TAG, "eventName: " + eventName);
				switch (eventType) {
				case AccessibilityEvent.TYPE_VIEW_CLICKED:
					// AccessibilityNodeInfo node = event.getSource();
					AccessibilityNodeInfo nodeClick = event.getSource();
					if (!event.getPackageName().equals("com.amen.gospel")) {
						// clickFirst = (Boolean)
						// Utils.getDataFromFile(MyApplication.getContext(),"clickFirst",
						// "bool");
						if (clickFirst) {
							RecordManager.clearRecord();
							// 产生了第�?次有效的点击事件
							Logger.i(TAG,
									"第一次点击，进入到主页面。�?��?��?��?��?��?��?��?��?��?��?��?��?��??");
							first_click_event_packname = (String) event
									.getPackageName();
							Logger.i(TAG, "MainActivityName:" + appName + ","
									+ first_click_event_packname);
							curWindowNodeInfo.clear();
							WinRootNodesList.clear();
							WindowsNodeInfo.clear();
						} else {
							// 缓存控件点击记录
							// 过滤掉其本身相关的点击事�?
							if ((nodeClick.getText() == null)
									|| !nodeClick.getText().equals(appName)) {
								Logger.i(TAG,
										"点击，缓存点击信息�?��?��?��?��?��?��?��?��?��?��?��?��?��?��??");

								RecordInfo record = new RecordInfo();
								if (isScrollFind) {
									record.setScroll(isScrollFind);
									record.setUpDownScroll(isUpDownScroll);
									record.setLeftRightScroll(isLeftRightScroll);
								}
								record.setActionType(RecordAction.ACTION_CLICK);
								// Logger.i(TAG,event.toString());

								record.setNode(nodeClick, curWindowNodeInfo,
										WindowsNodeInfo);
								// record.parseNode(nodeClick,WinRootNodesList);
								Logger.i(TAG, "把当前的rootNode加入到RecordInfo里面");
								Logger.i(TAG, "当前node的boundInScreen�?"
										+ nodeClick.getBoundsInScreen()
												.toString() + "packageName:"
										+ nodeClick.getPackageName().toString());
								// 打印
								int size = curWindowNodeInfo.size();
								Logger.i(TAG, "当前窗口的node个数�? : " + size);
								if (size > 0) {
									for (NodeInfo nodeInfo : curWindowNodeInfo) {
										Logger.i(
												TAG,
												"id: "
														+ nodeInfo.getId()
														+ " Text: "
														+ nodeInfo.getText()
														+ " class: "
														+ nodeInfo
																.getClassName()
														+ " rect: "
														+ nodeInfo
																.getBouondInScreen());
									}
								}
								RecordManager.addRecord(record);
								Logger.i(TAG, "clickisScrollFind:"
										+ isScrollFind);
								Logger.i(TAG, "add click data");
								Logger.i(TAG,
										"AccessibilityEvent.TYPE_VIEW_CLICKED");
								Logger.i(TAG, event.toString());
								Logger.i(TAG,
										"清除WindowsNodeInfo信息。�?��?��?��?��?��?��?��?��?��?��?��?��?��?��?��?��?��?��??");
								curWindowNodeInfo.clear();
								WinRootNodesList.clear();
								WindowsNodeInfo.clear();
							}

						}

					}
					// reset scroll
					isScrollFind = false;
					isLeftRightScroll = false;
					isUpDownScroll = false;
					break;

				case AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED:
					// 窗口状�?�发生变化，例如打开新的窗口界面
					Logger.i(TAG,
							"AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED");
					// 缓存当前窗口的rootNode

					AccessibilityNodeInfo tempNode = Utils.getRootNode();

					if (tempNode == null) {
						return;
					}

					// WinRootNodesList.add(event.getSource());
					// 重新分配新内存地�?
					curWindowNodeInfo = new ArrayList<NodeInfo>();

					// curWindowRootNode = event.getSource();
					// AccessibilityNodeInfo nodeWindowState =
					// event.getSource();
					// //
					int childCount = tempNode.getChildCount();
					if (childCount > 0) {
						for (int i = 0; i < childCount; i++) {
							getChildRecursive(tempNode.getChild(i));
						}
					}
					Logger.i(TAG, "state_changed 缓存当前窗口的rootNode:node size:"
							+ curWindowNodeInfo.size());
					WindowsNodeInfo.add(curWindowNodeInfo);
					if (tempNode != null) {
						Logger.i(TAG,
								"AccessibilityEvent.:" + tempNode.toString());
					}
					if (clickFirst) {
						if (!event.getPackageName().equals(
								first_click_event_packname)) {
							// 缓存第一次有效的控件点击进入的acticity界面信息
							String activityName = Utils.getActivityName();
							RecordInfo record = new RecordInfo();
							record.setActionType(RecordAction.ACTION_STARTACTIVITY);
							record.setActivityName(activityName);
							RecordManager.addRecord(record);
							clickFirst = false;
							Logger.i(TAG, "clickFirst = false");
							Logger.i(TAG, "firstPackageName:" + activityName);
						}
					}
					break;
				case AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED:
					// 缓存当前窗口的rootNode
					// curWindowRootNode = Utils.getRootNode();
					// tempNode = Utils.getRootNode();
					//
					// if (tempNode == null) {
					// return;
					// }

					// WinRootNodesList.add(event.getSource());
					// 重新分配新内存地�?
					// curWindowNodeInfo = new ArrayList<NodeInfo>();

					// curWindowRootNode = event.getSource();
					// AccessibilityNodeInfo nodeWindowState =
					// event.getSource();
					// //
					// childCount = tempNode.getChildCount();
					// if (childCount > 0) {
					// for (int i = 0; i < childCount; i++) {
					// getChildRecursive(tempNode.getChild(i));
					// }
					// }
					// Logger.i(TAG, "state_changed 缓存当前窗口的rootNode:node size:"
					// + curWindowNodeInfo.size());
					// WindowsNodeInfo.add(curWindowNodeInfo);
					// if (tempNode != null) {
					// Logger.i(TAG,
					// "AccessibilityEvent.:" + tempNode.toString());
					// }
					break;
				case AccessibilityEvent.TYPE_VIEW_SCROLLED:
					Logger.i(TAG, "AccessibilityEvent.TYPE_VIEW_SCROLLED");
					// 缓存当前窗口的rootNode
					tempNode = Utils.getRootNode();
					if (tempNode == null) {
						return;
					}

					// WinRootNodesList.add(event.getSource());
					// curWindowNodeInfo.clear();
					// 重新分配地址
					curWindowNodeInfo = new ArrayList<NodeInfo>();
					childCount = tempNode.getChildCount();
					if (childCount > 0) {
						for (int i = 0; i < childCount; i++) {
							getChildRecursive(tempNode.getChild(i));
						}
					}
					Logger.i(TAG,
							"view_scrolled 缓存当前窗口的rootNode:node size:"
									+ curWindowNodeInfo.size()
									+ curWindowNodeInfo.get(0).getPackageName());
					WindowsNodeInfo.add(curWindowNodeInfo);
					if (tempNode != null) {
						Logger.i(TAG,
								"AccessibilityEvent.:" + tempNode.toString());
					}
					if (safeCharSeqToString(event.getContentDescription()) != null
							&& safeCharSeqToString(
									event.getContentDescription()).contains(
									"Screen")) {
						// left,right scroll
						isScrollFind = true;
						isLeftRightScroll = true;
						isUpDownScroll = false;
						Logger.i("RecordInfo:",
								"scroll left rght isScrollFind:" + isScrollFind);
					} else {
						// up,down scroll
						isScrollFind = true;
						isLeftRightScroll = false;
						isUpDownScroll = true;
						Logger.i(TAG, "scroll up down isScrollFind:"
								+ isScrollFind);

					}
					// Logger.i(TAG, "AccessibilityEvent.TYPE_VIEW_SCROLLED:"
					// + event.toString());
					/*
					 * AccessibilityNodeInfo node2 = event.getSource();
					 * Logger.i(TAG, "AccessibilityEvent.TYPE_VIEW_SCROLLED:" +
					 * event.toString()); Logger.i(TAG,
					 * "AccessibilityEvent.TYPE_VIEW_SCROLLED:" +
					 * node2.toString()); RecordInfo recordSwipe = new
					 * RecordInfo();
					 * recordSwipe.setActionType(RecordAction.ACTION_SWIPE);
					 * recordSwipe.setNode(event.getSource());
					 * RecordManager.addRecord(recordSwipe);
					 */
					break;
				case AccessibilityEvent.TYPE_VIEW_FOCUSED:
					tempNode = Utils.getRootNode();
					if (tempNode == null) {
						return;
					}
					// 重新分配地址
					curWindowNodeInfo = new ArrayList<NodeInfo>();
					childCount = tempNode.getChildCount();
					if (childCount > 0) {
						for (int i = 0; i < childCount; i++) {
							getChildRecursive(tempNode.getChild(i));
						}
					}
					Logger.i(TAG,
							"TYPE_VIEW_FOCUSED 缓存当前窗口的rootNode:node size:"
									+ curWindowNodeInfo.size()
									+ curWindowNodeInfo.get(0).getPackageName());
					WindowsNodeInfo.add(curWindowNodeInfo);
					Logger.i(TAG, "TYPE_VIEW_FOCUSED");
					Logger.i(TAG, "TYPE_VIEW_FOCUSED Event:" + event.toString());
					RecordInfo recordFocus = new RecordInfo();
					recordFocus.setActionType(RecordAction.ACTION_FOCUSED);
					recordFocus.setNode(event.getSource(), curWindowNodeInfo,
							WindowsNodeInfo);
					RecordManager.addRecord(recordFocus);
					isScrollFind = false;
					isLeftRightScroll = false;
					isUpDownScroll = false;

					break;
				case AccessibilityEvent.CONTENT_CHANGE_TYPE_TEXT:
					Logger.i(TAG, "CONTENT_CHANGE_TYPE_TEXT");
					break;
				case AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START:
					Logger.i(TAG, "TYPE_TOUCH_EXPLORATION_GESTURE_START");
					break;
				case AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED:
					Logger.i(TAG, "TYPE_VIEW_TEXT_SELECTION_CHANGED");
					break;
				case AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED:
					tempNode = Utils.getRootNode();
					if (tempNode == null) {
						return;
					}

					// WinRootNodesList.add(event.getSource());
					// curWindowNodeInfo.clear();
					// 重新分配地址
					curWindowNodeInfo = new ArrayList<NodeInfo>();
					childCount = tempNode.getChildCount();
					if (childCount > 0) {
						for (int i = 0; i < childCount; i++) {
							getChildRecursive(tempNode.getChild(i));
						}
					}
					Logger.i(TAG,
							"TYPE_VIEW_TEXT_CHANGED 缓存当前窗口的rootNode:node size:"
									+ curWindowNodeInfo.size()
									+ curWindowNodeInfo.get(0).getPackageName());
					WindowsNodeInfo.add(curWindowNodeInfo);
					Logger.i(TAG, "CONTENT_CHANGE_TYPE_TEXT");
					Logger.i(
							TAG,
							"CONTENT_CHANGE_TYPE_TEXT Event:"
									+ event.toString());
					RecordInfo record = new RecordInfo();
					record.setActionType(RecordAction.ACTION_INPUT);
					record.setNode(event.getSource(), curWindowNodeInfo,
							WindowsNodeInfo);
					record.setInput_text(event.getSource().getText().toString());
					RecordManager.addRecord(record);

					break;

				default:
					break;
				}

				mLock.notifyAll();
			}

		}
	}

	private static String safeCharSeqToString(CharSequence cs) {
		if (cs == null)
			return "";
		else {
			return stripInvalidXMLChars(cs);
		}
	}

	private static String stripInvalidXMLChars(CharSequence cs) {
		StringBuffer ret = new StringBuffer();
		char ch;
		/*
		 * http://www.w3.org/TR/xml11/#charsets [#x1-#x8], [#xB-#xC],
		 * [#xE-#x1F], [#x7F-#x84], [#x86-#x9F], [#xFDD0-#xFDDF],
		 * [#x1FFFE-#x1FFFF], [#x2FFFE-#x2FFFF], [#x3FFFE-#x3FFFF],
		 * [#x4FFFE-#x4FFFF], [#x5FFFE-#x5FFFF], [#x6FFFE-#x6FFFF],
		 * [#x7FFFE-#x7FFFF], [#x8FFFE-#x8FFFF], [#x9FFFE-#x9FFFF],
		 * [#xAFFFE-#xAFFFF], [#xBFFFE-#xBFFFF], [#xCFFFE-#xCFFFF],
		 * [#xDFFFE-#xDFFFF], [#xEFFFE-#xEFFFF], [#xFFFFE-#xFFFFF],
		 * [#x10FFFE-#x10FFFF].
		 */
		for (int i = 0; i < cs.length(); i++) {
			ch = cs.charAt(i);

			if ((ch >= 0x1 && ch <= 0x8) || (ch >= 0xB && ch <= 0xC)
					|| (ch >= 0xE && ch <= 0x1F) || (ch >= 0x7F && ch <= 0x84)
					|| (ch >= 0x86 && ch <= 0x9f)
					|| (ch >= 0xFDD0 && ch <= 0xFDDF)
					|| (ch >= 0x1FFFE && ch <= 0x1FFFF)
					|| (ch >= 0x2FFFE && ch <= 0x2FFFF)
					|| (ch >= 0x3FFFE && ch <= 0x3FFFF)
					|| (ch >= 0x4FFFE && ch <= 0x4FFFF)
					|| (ch >= 0x5FFFE && ch <= 0x5FFFF)
					|| (ch >= 0x6FFFE && ch <= 0x6FFFF)
					|| (ch >= 0x7FFFE && ch <= 0x7FFFF)
					|| (ch >= 0x8FFFE && ch <= 0x8FFFF)
					|| (ch >= 0x9FFFE && ch <= 0x9FFFF)
					|| (ch >= 0xAFFFE && ch <= 0xAFFFF)
					|| (ch >= 0xBFFFE && ch <= 0xBFFFF)
					|| (ch >= 0xCFFFE && ch <= 0xCFFFF)
					|| (ch >= 0xDFFFE && ch <= 0xDFFFF)
					|| (ch >= 0xEFFFE && ch <= 0xEFFFF)
					|| (ch >= 0xFFFFE && ch <= 0xFFFFF)
					|| (ch >= 0x10FFFE && ch <= 0x10FFFF))
				ret.append(".");
			else
				ret.append(ch);
		}
		return ret.toString();
	}

	private void getChildRecursive(AccessibilityNodeInfo node) {
		if (node != null) {
			Logger.i(TAG,
					"child widget info,id; " + node.getViewIdResourceName()
							+ " text: " + safeCharSeqToString(node.getText())
							+ " boundInScreen:"
							+ node.getBoundsInScreen().toString());
			NodeInfo nodeInfo = new NodeInfo();
			String id = node.getViewIdResourceName();
			String text = safeCharSeqToString(node.getText());
			nodeInfo.setClassName(safeCharSeqToString(node.getClassName()));
			nodeInfo.setPackageName(safeCharSeqToString(node.getPackageName()));
			Rect curRect = node.getBoundsInScreen();
			nodeInfo.setBouondInScreen(curRect);
			nodeInfo.setNode(node);
			if (Utils.isNullOrBlank(id)) {
				nodeInfo.setId("no id");
			} else {
				nodeInfo.setId(id);
			}
			if (Utils.isNullOrBlank(text)) {
				nodeInfo.setText("no text");
			} else {
				nodeInfo.setText(text);
			}
			curWindowNodeInfo.add(nodeInfo);

			int childCcount = node.getChildCount();
			if (childCcount > 0) {
				for (int i = 0; i < childCcount; i++) {
					getChildRecursive(node.getChild(i));
				}
			}
		}
	}
}
