package com.amen.gospel.model;

import java.util.ArrayList;
import java.util.List;

import android.graphics.Rect;
import android.view.accessibility.AccessibilityNodeInfo;

import com.amen.gospel.log.Logger;
import com.amen.gospel.utils.Utils;
import com.amen.gospel.utils.Utils.LOCALTYPE;

/**
 * @author yls 20170525 记录对控件元素的事件信息
 */
public class RecordInfo {
	private static String tag = "RecordInfo";
	private int actionType;

	private AccessibilityNodeInfo curNode;
	private AccessibilityNodeInfo rootNode;
	private List<NodeInfo> nodeInfoList = new ArrayList<NodeInfo>();
	private NodeInfo curNodeInfo;
	private List<AccessibilityNodeInfo> curWinNodeList = new ArrayList<AccessibilityNodeInfo>();

	public List<NodeInfo> getNodeInfoList() {
		return nodeInfoList;
	}

	public void setNodeInfoList(List<NodeInfo> nodeInfoList) {
		this.nodeInfoList = nodeInfoList;
	}

	private String activityName;

	private String input_text = "";
	private String className = "";
	private String id = "";
	private String text = "";
	private parent parent = new parent();
	private child child = new child();
	private String packageName;
	private boolean isScroll = false;// 滑动查找控件
	private boolean isLeftRightScroll = false;// 左右滑动
	private boolean isUpDownScroll = false;// 上下滑动
	private LOCALTYPE localType;
	private int childIndex = -1;
	private Before before;
	private After after;

	public Before getBefore() {
		return before;
	}

	public void setBefore(Before before) {
		this.before = before;
	}

	public After getAfter() {
		return after;
	}

	public void setAfter(After after) {
		this.after = after;
	}

	public class Before {
		private String id;
		private String text;

		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

		public String getText() {
			return text;
		}

		public void setText(String text) {
			this.text = text;
		}

	}

	public class After {
		private String id;
		private String text;

		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

		public String getText() {
			return text;
		}

		public void setText(String text) {
			this.text = text;
		}

	}

	public int getChildIndex() {
		return childIndex;
	}

	public void setChildIndex(int childIndex) {
		this.childIndex = childIndex;
	}

	public LOCALTYPE getLocalType() {
		return localType;
	}

	public void setLocalType(LOCALTYPE localType) {
		this.localType = localType;
	}

	public boolean isScroll() {
		return isScroll;
	}

	public void setScroll(boolean isScroll) {
		this.isScroll = isScroll;
	}

	public boolean isLeftRightScroll() {
		return isLeftRightScroll;
	}

	public void setLeftRightScroll(boolean isLeftRightScroll) {
		this.isLeftRightScroll = isLeftRightScroll;
	}

	public boolean isUpDownScroll() {
		return isUpDownScroll;
	}

	public void setUpDownScroll(boolean isUpDownScroll) {
		this.isUpDownScroll = isUpDownScroll;
	}

	public String getPackageName() {
		return packageName;
	}

	public void setPackageName(String packageName) {
		this.packageName = packageName;
	}

	public String getClassName() {
		return className;
	}

	public void setClassName(String className) {
		Logger.i(id, "class:" + className);
		this.className = className;
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		Logger.i(id, "id:" + id);
		if ("no id".equals(id)) {
			this.id = "";
		} else {
			this.id = id;
		}
	}

	public String getText() {
		return text;
	}

	public void setText(String text) {
		Logger.i(id, "text:" + text);
		if ("no text".equals(text)) {
			this.text = "";
		} else {
			this.text = text;
		}
	}

	public parent getParent() {
		return parent;
	}

	public void setParent(parent parent) {
		this.parent = parent;
	}

	public child getChild() {
		return child;
	}

	public void setChild(child child) {
		this.child = child;
	}

	public String getInput_text() {
		return input_text;
	}

	public void setInput_text(String input_text) {
		if (input_text == null) {
			input_text = "";
		}
		this.input_text = input_text;
	}

	public int getActionType() {
		return actionType;
	}

	public void setActionType(int actionType) {
		this.actionType = actionType;
	}

	public AccessibilityNodeInfo getNode() {
		return curNode;
	}

	// public void setNode(AccessibilityNodeInfo node){
	// this.node = node;
	// }
	public RecordInfo() {
		// TODO Auto-generated constructor stub
	}

	public RecordInfo(String id, String text, String actionType,
			String inputText, LOCALTYPE localType, boolean isAllowScroll,
			String packageName) {
		// TODO Auto-generated constructor stub
		Logger.i(tag, "id:" + id + " text:" + text + " actionType:"
				+ actionType + " inputText:" + inputText + " LOCALTYPE:"
				+ localType.toString() + " isAllowScroll:" + isAllowScroll
				+ " packageName:" + packageName);
		setId(id);
		setText(text);
		setInput_text(inputText);
		if (actionType.equals("ACTION_STARTACTIVITY")) {
			setActionType(0);
		} else if (actionType.equals("ACTION_CLICK")) {
			setActionType(1);
		} else if (actionType.equals("ACTION_INPUT")) {
			setActionType(2);
		}

		setLocalType(localType);
		setScroll(isAllowScroll);
		setActivityName(packageName);
	}

	public void parseNode(AccessibilityNodeInfo node,
			List<AccessibilityNodeInfo> rootNodes) {
		curNode = node;
		isWidgetLocation = false;
		this.curWinNodeList = rootNodes;

		// int length = curWinNodes.size();
		// if (length > 0) {
		// // this.rootNode = curWinRootNodes.get(length - 1);
		// }
		// this.curWinNodeList = nodeLit;
		// 判断有没有滑动，没有直接点坐�?
		// if (!isScroll()) {
		// Logger.i(tag, "不是滑动窗口，直接点击坐标！");
		// localType = LOCALTYPE.NODE;
		// return;
		// }

		int length = this.curWinNodeList.size();
		if (length < 0) {
			Logger.i(tag,
					"rootNode个数为空................................................");
			return;
		}
		Logger.i(tag, "窗口个数�?" + length);
		for (int index = length - 1; index >= 0; index--) {
			this.rootNode = this.curWinNodeList.get(index);
			nodeInfoList.clear();
			setCurrentWindowNodesInfo(node, this.rootNode);
			Logger.i(tag, "index :" + index);
			Logger.i(tag, "当前页面node个数" + nodeInfoList.size());
			Logger.i(tag, "当前node信息,id; " + node.getViewIdResourceName()
					+ " text: " + safeCharSeqToString(node.getText())
					+ " className: " + safeCharSeqToString(node.getClassName())
					// + " packageName: "
					// + safeCharSeqToString(node.getPackageName())
					+ " boundInScreen: " + node.getBoundsInScreen().toString());

			this.curNodeInfo = getCurrentNodeInfo(node);
			if (this.curNodeInfo == null) {
				Logger.i(tag, "没有查找到当前的node信息");
				continue;
			}
			Logger.i(tag,
					"当前node信息,id: " + curNodeInfo.getId() + " text: "
							+ curNodeInfo.getText() + " className:"
							+ curNodeInfo.getClassName());

			if (node != null) {
				// 先查询一遍当前node的属性信息，如果唯一，直接用当前的属性定位做回放
				// Boolean bFlag = judgeIfLocationByWidgetAttr(curNode);
				// if (bFlag) {
				// localType = LOCALTYPE.WIDGETATTR;
				// Logger.i(tag,
				// "curent node location type is LOCALTYPE.WIDGETATTR,id: "
				// + getId() + " text: " + getText());
				// return;
				// }
				// 先查询一遍当前node的属性信息，如果唯一，直接用当前的属性定位做回放
				Boolean bFlag = IfWidgetAttrSole(this.curNodeInfo);
				if (bFlag) {
					localType = LOCALTYPE.WIDGETATTR;
					Logger.i(tag,
							"curent node location type is LOCALTYPE.WIDGETATTR,id: "
									+ getId() + " text: " + getText());
					return;
				}
			}
			Logger.i(tag, "当前node的属性不唯一 ......................................");
			Logger.i(tag, "查询子控件，看是否有唯一属�??");
			boolean bFlag = JudgeIfChildAttrSole();
			if (bFlag) {
				setLocalType(LOCALTYPE.WIDGETATTR);
				Logger.i(tag,
						"child node location type is LOCALTYPE.WIDGETATTR,id: "
								+ getId() + " text: " + getText());

				// 释放内存
				rootNodes = null;
				return;

			}
			Logger.i(tag, "子控件属性不唯一");
		}
		// 释放内存
		rootNodes = null;
		// if (rootNode == null) {
		// // 定位方式用node
		// localType = LOCALTYPE.NODE;
		// Logger.i(tag, "root node is null,location type is LOCALTYPE.NODE");
		// return;
		// }

		// test node method
		// if (rootNode!=null) {
		// // 定位方式用node
		// localType = LOCALTYPE.NODE;
		// Logger.i(tag, "toot node is null,location type is LOCALTYPE.NODE");
		// return;
		// }
		// 缓存当前窗口�?有node的id、text、class、package、boundinscreen信息
		// 由于从click里面传进来的node节点信息不全（窗口在切换，有些信息没有绘制完全），用rootNode来解析当前窗口的被点击的click节点信息

		// setCurrentWindowNodesInfo(node, rootNode);
		// get current node

		// //
		// int childCount = rootNode.getChildCount();
		// if (childCount > 0) {
		// for (int i = 0; i < childCount; i++) {
		// getChildRecursive(rootNode.getChild(i));
		// }
		// }
		// 打印
		// int size = this.nodeInfoList.size();
		// Logger.i(tag, "当前窗口的node个数�? : " + size);
		// if (size > 0) {
		// for (NodeInfo nodeInfo : nodeInfoList) {
		// Logger.i(
		// tag,
		// "id: " + nodeInfo.getId() + " Text: "
		// + nodeInfo.getText() + " class: "
		// + nodeInfo.getClassName() + " rect: "
		// + nodeInfo.getBouondInScreen());
		// }
		// }

		// if (node != null) {
		// // 先查询一遍当前node的属性信息，如果唯一，直接用当前的属性定位做回放
		// // Boolean bFlag = judgeIfLocationByWidgetAttr(curNode);
		// // if (bFlag) {
		// // localType = LOCALTYPE.WIDGETATTR;
		// // Logger.i(tag,
		// // "curent node location type is LOCALTYPE.WIDGETATTR,id: "
		// // + getId() + " text: " + getText());
		// // return;
		// // }
		// // 先查询一遍当前node的属性信息，如果唯一，直接用当前的属性定位做回放
		// Boolean bFlag = IfWidgetAttrSole(this.curNodeInfo);
		// if (bFlag) {
		// localType = LOCALTYPE.WIDGETATTR;
		// Logger.i(tag,
		// "curent node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		// }
		// }
		// Logger.i(tag, "当前node的属性不唯一 ......................................");
		// List<String> listIds = getIds();
		// int attrI = 0;
		// if (listIds.size() > 0) {
		// for (String strId : listIds) {
		// Logger.i(tag, "id: " + strId + " Text: "
		// + getTexts().get(attrI));
		// attrI++;
		// }
		//
		// }
		// if (parent == null) {
		// parent = new parent();
		// }
		// if (child == null) {
		// child = new child();
		// }
		// if (node != null) {

		// 通过className、packageName、boundInScreen信息来查找当前node�?
		// curNode = getCurrentNode(node, curWinRootNode);
		// if (curNode == null) {
		// Logger.i(tag, "没有找到当前node�?-----------------------------");
		// }
		// Logger.i(
		// tag,
		// "current node info,id: " + curNode.getViewIdResourceName()
		// + " text: "
		// + safeCharSeqToString(curNode.getText())
		// + " className:"
		// + safeCharSeqToString(curNode.getClassName()));
		// curNode = node;
		// 判断id或�?�文本�?�是否唯�?,否则判断子控件的是否唯一，若是则可以用此控件唯一定位;
		// Boolean bFlag = judgeIfLocationByWidgetAttr(curNode);
		// if (bFlag) {
		// localType = LOCALTYPE.WIDGETATTR;
		// Logger.i(tag,
		// "curent node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		// }
		//
		// Logger.i(tag, "查询子控件，看是否有唯一属�??");
		// boolean bFlag = JudgeIfChildAttrSole();
		// if (bFlag) {
		//
		// setLocalType(LOCALTYPE.WIDGETATTR);
		// Logger.i(tag,
		// "child node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		//
		// }
		// int rootNodeSize = this.curWinNodeList.size();
		// if (rootNodeSize < 2) {
		// Logger.i(tag, "获取的窗口root node节点少于2，不能回�?�?个node来判�?");
		// return;
		// }
		// Logger.i(tag, "�?回上�?个状态抓取的node信息，再次判断子控件属�?�是否唯�?");
		// rootNode = curWinNodeList.get(rootNodeSize - 2);
		// // //
		// if (rootNode == null) {
		// Logger.i(tag, "�?回上�?个状态抓取的node信息，再次判断子控件属�?�是否唯�?");
		// return;
		// }
		// // 清除之前的数�?
		// nodeInfoList.clear();
		// setCurrentWindowNodesInfo(node, rootNode);
		// // 打印
		// size = this.nodeInfoList.size();
		// Logger.i(tag, "�?回上�?个状态抓取的node信息 : " + size);
		// if (size > 0) {
		// for (NodeInfo nodeInfo : nodeInfoList) {
		// Logger.i(
		// tag,
		// "id: " + nodeInfo.getId() + " Text: "
		// + nodeInfo.getText() + " class: "
		// + nodeInfo.getClassName() + " rect: "
		// + nodeInfo.getBouondInScreen());
		// }
		// }
		//
		// // int childCount = rootNode.getChildCount();
		// // if (childCount > 0) {
		// // for (int i = 0; i < childCount; i++) {
		// // getChildRecursive(rootNode.getChild(i));
		// // }
		// // }
		//
		// bFlag = JudgeIfChildAttrSole();
		// if (bFlag) {
		//
		// setLocalType(LOCALTYPE.WIDGETATTR);
		// Logger.i(tag,
		// "child node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		//
		// }
		// getChildRecursive(node);
		// if (isWidgetLocation) {
		// setLocalType(LOCALTYPE.WIDGETATTR);
		// Logger.i(tag,
		// "child node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		// }

		// 当前控件和子控件不唯�?，判断当前控件的直接父控件是否唯�?，若唯一，则用相对路径定位�??

		// AccessibilityNodeInfo parentNode = node.getParent();
		// if (parentNode != null) {
		// String parentId = parentNode.getViewIdResourceName();
		// String parentText = safeCharSeqToString(parentNode.getText());
		// // 只需要一个有id或�?�文本的父控件就可以
		// if (!Utils.isNullOrBlank(parentId)
		// || !Utils.isNullOrBlank(parentText)) {
		// getChildRecursive(node);
		// if (isWidgetLocation) {
		// setLocalType(LOCALTYPE.PARENT);
		// Logger.i(tag, "location type is LOCALTYPE.PARENT,id: "
		// + parentId + " text: " + parentText);
		// Rect nodeRect = new Rect();
		// node.getBoundsInScreen(nodeRect);
		// childCount = parentNode.getChildCount();
		// if (childCount == 1) {
		// childIndex = 0;
		// return;
		// } else {
		// for (int index = 0; index < childCount; index++) {
		// AccessibilityNodeInfo childNode = parentNode
		// .getChild(index);
		// Rect childRect = new Rect();
		// childNode.getBoundsInScreen(childRect);
		// if (childRect.left == nodeRect.left
		// && childRect.right == nodeRect.right
		// && childRect.top == nodeRect.top
		// && childRect.bottom == nodeRect.bottom) {
		// childIndex = index;
		// break;
		// }
		// }
		// }
		//
		// return;
		// }
		// }
		//
		// }
		// // 通过控件本身，子控件和直接父控件都不能定位的，对于非滑动页面，�?�过Node直接定位
		// if (!isScroll) {
		// localType = LOCALTYPE.NODE;
		// }
		// }
	}

	public void setNode(AccessibilityNodeInfo node, List<NodeInfo> curWinNodes,
			List<List<NodeInfo>> WindowsNodeInfo) {
		curNode = node;
		isWidgetLocation = false;
		AccessibilityNodeInfo parent = node.getParent();

		// 判断控件是否处于滑动窗口里面
		boolean isScroable = false;
		while (parent != null) {
			if (parent.isScrollable()) {
				isScroable = true;
				setScroll(true);
				break;
			}
			parent = parent.getParent();
		}

		// int length = curWinNodes.size();
		// if (length > 0) {
		// // this.rootNode = curWinRootNodes.get(length - 1);
		// }
		// this.curWinNodeList = nodeLit;

		int length = WindowsNodeInfo.size();
		if (length < 0) {
			Logger.i(tag,
					"窗口数据为空................................................");
			return;
		}
		Logger.i(tag, "窗口个数为： " + length);
		for (int index = length - 1; index >= 0; index--) {
			this.nodeInfoList = WindowsNodeInfo.get(index);
			Logger.i(tag, "index :" + index);
			Logger.i(tag, "当前页面node个数" + nodeInfoList.size());
			Logger.i(tag, "当前node信息,id; " + node.getViewIdResourceName()
					+ " text: " + safeCharSeqToString(node.getText())
					+ " className: " + safeCharSeqToString(node.getClassName())
					// + " packageName: "
					// + safeCharSeqToString(node.getPackageName())
					+ " boundInScreen: " + node.getBoundsInScreen().toString());

			this.curNodeInfo = getCurrentNodeInfo(node);
			if (this.curNodeInfo == null) {
				Logger.i(tag, "没有查找到当前的node信息");
				continue;
			}
			Logger.i(tag,
					"当前node信息,id: " + curNodeInfo.getId() + " text: "
							+ curNodeInfo.getText() + " className:"
							+ curNodeInfo.getClassName());

			if (node != null) {
				// 先查询一遍当前node的属性信息，如果唯一，直接用当前的属性定位做回放
				// Boolean bFlag = judgeIfLocationByWidgetAttr(curNode);
				// if (bFlag) {
				// localType = LOCALTYPE.WIDGETATTR;
				// Logger.i(tag,
				// "curent node location type is LOCALTYPE.WIDGETATTR,id: "
				// + getId() + " text: " + getText());
				// return;
				// }
				// 先查询一遍当前node的属性信息，如果唯一，直接用当前的属性定位做回放
				Boolean bFlag = IfWidgetAttrSole(this.curNodeInfo);
				if (bFlag) {
					localType = LOCALTYPE.WIDGETATTR;
					Logger.i(tag,
							"curent node location type is LOCALTYPE.WIDGETATTR,id: "
									+ getId() + " text: " + getText());
					// 释放内存
					WindowsNodeInfo = null;
					return;
				}
			}
			Logger.i(tag, "当前node的属性不唯一 ......................................");
			Logger.i(tag, "查询子控件，看是否有唯一属�??");
			boolean bFlag = JudgeIfChildAttrSole();
			if (bFlag) {
				setLocalType(LOCALTYPE.WIDGETATTR);
				Logger.i(tag,
						"child node location type is LOCALTYPE.WIDGETATTR,id: "
								+ getId() + " text: " + getText());
				// 释放内存
				WindowsNodeInfo = null;
				return;

			}
			Logger.i(tag, "子控件属性不唯一");
		}
		// 释放内存
		WindowsNodeInfo = null;
		// 如果没有查找到控件属性， 判断有没有滑动，没有直接点坐�?
		if (!isScroable) {
			Logger.i(tag, "不是滑动窗口，直接点击坐标！");
			localType = LOCALTYPE.NODE;
			return;
		}
		// if (rootNode == null) {
		// // 定位方式用node
		// localType = LOCALTYPE.NODE;
		// Logger.i(tag, "root node is null,location type is LOCALTYPE.NODE");
		// return;
		// }

		// test node method
		// if (rootNode!=null) {
		// // 定位方式用node
		// localType = LOCALTYPE.NODE;
		// Logger.i(tag, "toot node is null,location type is LOCALTYPE.NODE");
		// return;
		// }
		// 缓存当前窗口�?有node的id、text、class、package、boundinscreen信息
		// 由于从click里面传进来的node节点信息不全（窗口在切换，有些信息没有绘制完全），用rootNode来解析当前窗口的被点击的click节点信息

		// setCurrentWindowNodesInfo(node, rootNode);
		// get current node

		// //
		// int childCount = rootNode.getChildCount();
		// if (childCount > 0) {
		// for (int i = 0; i < childCount; i++) {
		// getChildRecursive(rootNode.getChild(i));
		// }
		// }
		// 打印
		// int size = this.nodeInfoList.size();
		// Logger.i(tag, "当前窗口的node个数�? : " + size);
		// if (size > 0) {
		// for (NodeInfo nodeInfo : nodeInfoList) {
		// Logger.i(
		// tag,
		// "id: " + nodeInfo.getId() + " Text: "
		// + nodeInfo.getText() + " class: "
		// + nodeInfo.getClassName() + " rect: "
		// + nodeInfo.getBouondInScreen());
		// }
		// }

		// if (node != null) {
		// // 先查询一遍当前node的属性信息，如果唯一，直接用当前的属性定位做回放
		// // Boolean bFlag = judgeIfLocationByWidgetAttr(curNode);
		// // if (bFlag) {
		// // localType = LOCALTYPE.WIDGETATTR;
		// // Logger.i(tag,
		// // "curent node location type is LOCALTYPE.WIDGETATTR,id: "
		// // + getId() + " text: " + getText());
		// // return;
		// // }
		// // 先查询一遍当前node的属性信息，如果唯一，直接用当前的属性定位做回放
		// Boolean bFlag = IfWidgetAttrSole(this.curNodeInfo);
		// if (bFlag) {
		// localType = LOCALTYPE.WIDGETATTR;
		// Logger.i(tag,
		// "curent node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		// }
		// }
		// Logger.i(tag, "当前node的属性不唯一 ......................................");
		// List<String> listIds = getIds();
		// int attrI = 0;
		// if (listIds.size() > 0) {
		// for (String strId : listIds) {
		// Logger.i(tag, "id: " + strId + " Text: "
		// + getTexts().get(attrI));
		// attrI++;
		// }
		//
		// }
		// if (parent == null) {
		// parent = new parent();
		// }
		// if (child == null) {
		// child = new child();
		// }
		// if (node != null) {

		// 通过className、packageName、boundInScreen信息来查找当前node�?
		// curNode = getCurrentNode(node, curWinRootNode);
		// if (curNode == null) {
		// Logger.i(tag, "没有找到当前node�?-----------------------------");
		// }
		// Logger.i(
		// tag,
		// "current node info,id: " + curNode.getViewIdResourceName()
		// + " text: "
		// + safeCharSeqToString(curNode.getText())
		// + " className:"
		// + safeCharSeqToString(curNode.getClassName()));
		// curNode = node;
		// 判断id或�?�文本�?�是否唯�?,否则判断子控件的是否唯一，若是则可以用此控件唯一定位;
		// Boolean bFlag = judgeIfLocationByWidgetAttr(curNode);
		// if (bFlag) {
		// localType = LOCALTYPE.WIDGETATTR;
		// Logger.i(tag,
		// "curent node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		// }
		//
		// Logger.i(tag, "查询子控件，看是否有唯一属�??");
		// boolean bFlag = JudgeIfChildAttrSole();
		// if (bFlag) {
		//
		// setLocalType(LOCALTYPE.WIDGETATTR);
		// Logger.i(tag,
		// "child node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		//
		// }
		// int rootNodeSize = this.curWinNodeList.size();
		// if (rootNodeSize < 2) {
		// Logger.i(tag, "获取的窗口root node节点少于2，不能回�?�?个node来判�?");
		// return;
		// }
		// Logger.i(tag, "�?回上�?个状态抓取的node信息，再次判断子控件属�?�是否唯�?");
		// rootNode = curWinNodeList.get(rootNodeSize - 2);
		// // //
		// if (rootNode == null) {
		// Logger.i(tag, "�?回上�?个状态抓取的node信息，再次判断子控件属�?�是否唯�?");
		// return;
		// }
		// // 清除之前的数�?
		// nodeInfoList.clear();
		// setCurrentWindowNodesInfo(node, rootNode);
		// // 打印
		// size = this.nodeInfoList.size();
		// Logger.i(tag, "�?回上�?个状态抓取的node信息 : " + size);
		// if (size > 0) {
		// for (NodeInfo nodeInfo : nodeInfoList) {
		// Logger.i(
		// tag,
		// "id: " + nodeInfo.getId() + " Text: "
		// + nodeInfo.getText() + " class: "
		// + nodeInfo.getClassName() + " rect: "
		// + nodeInfo.getBouondInScreen());
		// }
		// }
		//
		// // int childCount = rootNode.getChildCount();
		// // if (childCount > 0) {
		// // for (int i = 0; i < childCount; i++) {
		// // getChildRecursive(rootNode.getChild(i));
		// // }
		// // }
		//
		// bFlag = JudgeIfChildAttrSole();
		// if (bFlag) {
		//
		// setLocalType(LOCALTYPE.WIDGETATTR);
		// Logger.i(tag,
		// "child node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		//
		// }
		// getChildRecursive(node);
		// if (isWidgetLocation) {
		// setLocalType(LOCALTYPE.WIDGETATTR);
		// Logger.i(tag,
		// "child node location type is LOCALTYPE.WIDGETATTR,id: "
		// + getId() + " text: " + getText());
		// return;
		// }

		// 当前控件和子控件不唯�?，判断当前控件的直接父控件是否唯�?，若唯一，则用相对路径定位�??

		// AccessibilityNodeInfo parentNode = node.getParent();
		// if (parentNode != null) {
		// String parentId = parentNode.getViewIdResourceName();
		// String parentText = safeCharSeqToString(parentNode.getText());
		// // 只需要一个有id或�?�文本的父控件就可以
		// if (!Utils.isNullOrBlank(parentId)
		// || !Utils.isNullOrBlank(parentText)) {
		// getChildRecursive(node);
		// if (isWidgetLocation) {
		// setLocalType(LOCALTYPE.PARENT);
		// Logger.i(tag, "location type is LOCALTYPE.PARENT,id: "
		// + parentId + " text: " + parentText);
		// Rect nodeRect = new Rect();
		// node.getBoundsInScreen(nodeRect);
		// childCount = parentNode.getChildCount();
		// if (childCount == 1) {
		// childIndex = 0;
		// return;
		// } else {
		// for (int index = 0; index < childCount; index++) {
		// AccessibilityNodeInfo childNode = parentNode
		// .getChild(index);
		// Rect childRect = new Rect();
		// childNode.getBoundsInScreen(childRect);
		// if (childRect.left == nodeRect.left
		// && childRect.right == nodeRect.right
		// && childRect.top == nodeRect.top
		// && childRect.bottom == nodeRect.bottom) {
		// childIndex = index;
		// break;
		// }
		// }
		// }
		//
		// return;
		// }
		// }
		//
		// }
		// // 通过控件本身，子控件和直接父控件都不能定位的，对于非滑动页面，�?�过Node直接定位
		// if (!isScroll) {
		// localType = LOCALTYPE.NODE;
		// }
		// }
	}

	private boolean isWidgetLocation = false;

	private void getChildRecursive(AccessibilityNodeInfo node) {
		if (node != null) {
			Logger.i(
					tag,
					"child widget info,id; " + node.getViewIdResourceName()
							+ " text: " + safeCharSeqToString(node.getText())
							+ " className: "
							+ safeCharSeqToString(node.getClassName())
							+ " packageName: "
							+ safeCharSeqToString(node.getPackageName())
							+ " boundInScreen: "
							+ node.getBoundsInScreen().toString());
			judgeIfLocationByWidgetAttr(node);

			int childCcount = node.getChildCount();
			if (childCcount > 0) {
				for (int i = 0; i < childCcount; i++) {
					getChildRecursive(node.getChild(i));
				}
			}
		}
	}

	/**
	 * 判断当前控件的属性是否唯�?
	 * 
	 * @param node
	 * @return
	 */
	private Boolean judgeIfLocationByWidgetAttr(AccessibilityNodeInfo node) {
		String id = node.getViewIdResourceName();
		String text = safeCharSeqToString(node.getText());
		int size = nodeInfoList.size();
		int counts = 0;
		if (size > 0) {
			for (NodeInfo nodeInfo : nodeInfoList) {
				if (!Utils.isNullOrBlank(id) && !Utils.isNullOrBlank(text)) {
					if (id.equals(nodeInfo.getId())
							&& text.equals(nodeInfo.getText())) {
						counts++;
					}
				} else if (!Utils.isNullOrBlank(id)) {
					if (id.equals(nodeInfo.getId())) {
						counts++;
					}
				} else if (!Utils.isNullOrBlank(safeCharSeqToString(text))) {
					if (text.equals(nodeInfo.getText())) {
						counts++;
					}
				}
			}
		}
		if (1 == counts) {
			setId(node.getViewIdResourceName());
			setText(safeCharSeqToString(node.getText()));
			setClassName(safeCharSeqToString(node.getClassName()));
			setPackageName(safeCharSeqToString(node.getPackageName()));
			isWidgetLocation = true;
			return true;

		}
		return false;
	}

	private Boolean IfWidgetAttrSole(NodeInfo nodeInfo) {
		String id = nodeInfo.getId();
		String text = nodeInfo.getText();
		int size = nodeInfoList.size();
		int counts = 0;
		if (size > 0) {
			for (NodeInfo info : nodeInfoList) {
				if (!Utils.isNullOrBlank(id) && !Utils.isNullOrBlank(text)) {
					if (id.equals(info.getId()) && text.equals(info.getText())) {
						counts++;
					}
				} else if (!Utils.isNullOrBlank(id)) {
					if (id.equals(info.getId())) {
						counts++;
					}
				} else if (!Utils.isNullOrBlank(safeCharSeqToString(text))) {
					if (text.equals(info.getText())) {
						counts++;
					}
				}
			}
		}
		if (1 == counts) {
			return true;
		}
		return false;
	}

	public String getActivityName() {
		return activityName;
	}

	public void setActivityName(String activityName) {
		this.activityName = activityName;
	}

	public class parent {
		private String className = "";
		private String id = "";
		private String text = "";

		public String getClassName() {
			return className;
		}

		public void setClassName(String className) {
			this.className = className;
		}

		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

		public String getText() {
			return text;
		}

		public void setText(String text) {
			this.text = text;
		}
	}

	public class child {
		private String className;
		private String id;
		private String text;

		public String getClassName() {
			return className;
		}

		public void setClassName(String className) {
			this.className = className;
		}

		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

		public String getText() {
			return text;
		}

		public void setText(String text) {
			this.text = text;
		}

	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append(super.toString());
		builder.append("RecordInfo=[");
		builder.append("ActionType:").append(actionType);
		builder.append(";ActivityName:").append(activityName);
		builder.append(";input_text:").append(input_text);
		builder.append(";id:").append(getId());
		builder.append(";text:").append(getText());
		// builder.append(";parentClass:").append(getParent().getClassName());
		builder.append(";parentId:").append(getParent().getId());
		builder.append(";parentText:").append(getParent().getText());
		// builder.append(";childClass:").append(getChild().getClassName());
		builder.append(";childId:").append(getChild().getId());
		builder.append(";childText:").append(getChild().getText());

		if (curNode != null) {
			builder.append(";Node:").append(curNode.toString());
		} else {
			builder.append(";Node:").append("null");
		}
		builder.append("]");
		return builder.toString();
	}

	private static String safeCharSeqToString(CharSequence cs) {
		if (cs == null)
			return "";
		else {
			return stripInvalidXMLChars(cs);
		}
	}

	private static String stripInvalidXMLChars(CharSequence cs) {
		StringBuffer ret = new StringBuffer();
		char ch;
		/*
		 * http://www.w3.org/TR/xml11/#charsets [#x1-#x8], [#xB-#xC],
		 * [#xE-#x1F], [#x7F-#x84], [#x86-#x9F], [#xFDD0-#xFDDF],
		 * [#x1FFFE-#x1FFFF], [#x2FFFE-#x2FFFF], [#x3FFFE-#x3FFFF],
		 * [#x4FFFE-#x4FFFF], [#x5FFFE-#x5FFFF], [#x6FFFE-#x6FFFF],
		 * [#x7FFFE-#x7FFFF], [#x8FFFE-#x8FFFF], [#x9FFFE-#x9FFFF],
		 * [#xAFFFE-#xAFFFF], [#xBFFFE-#xBFFFF], [#xCFFFE-#xCFFFF],
		 * [#xDFFFE-#xDFFFF], [#xEFFFE-#xEFFFF], [#xFFFFE-#xFFFFF],
		 * [#x10FFFE-#x10FFFF].
		 */
		for (int i = 0; i < cs.length(); i++) {
			ch = cs.charAt(i);

			if ((ch >= 0x1 && ch <= 0x8) || (ch >= 0xB && ch <= 0xC)
					|| (ch >= 0xE && ch <= 0x1F) || (ch >= 0x7F && ch <= 0x84)
					|| (ch >= 0x86 && ch <= 0x9f)
					|| (ch >= 0xFDD0 && ch <= 0xFDDF)
					|| (ch >= 0x1FFFE && ch <= 0x1FFFF)
					|| (ch >= 0x2FFFE && ch <= 0x2FFFF)
					|| (ch >= 0x3FFFE && ch <= 0x3FFFF)
					|| (ch >= 0x4FFFE && ch <= 0x4FFFF)
					|| (ch >= 0x5FFFE && ch <= 0x5FFFF)
					|| (ch >= 0x6FFFE && ch <= 0x6FFFF)
					|| (ch >= 0x7FFFE && ch <= 0x7FFFF)
					|| (ch >= 0x8FFFE && ch <= 0x8FFFF)
					|| (ch >= 0x9FFFE && ch <= 0x9FFFF)
					|| (ch >= 0xAFFFE && ch <= 0xAFFFF)
					|| (ch >= 0xBFFFE && ch <= 0xBFFFF)
					|| (ch >= 0xCFFFE && ch <= 0xCFFFF)
					|| (ch >= 0xDFFFE && ch <= 0xDFFFF)
					|| (ch >= 0xEFFFE && ch <= 0xEFFFF)
					|| (ch >= 0xFFFFE && ch <= 0xFFFFF)
					|| (ch >= 0x10FFFE && ch <= 0x10FFFF))
				ret.append(".");
			else
				ret.append(ch);
		}
		return ret.toString();
	}

	// 缓存当前窗口�?有的id和文本信�?
	public List<String> ids = new ArrayList<String>();
	public List<String> texts = new ArrayList<String>();

	public List<String> getIds() {
		return ids;
	}

	public void setIds(List<String> ids) {
		this.ids = ids;
	}

	public List<String> getTexts() {
		return texts;
	}

	public void setTexts(List<String> texts) {
		this.texts = texts;
	}

	private void setCurrentWindowNodesInfo(AccessibilityNodeInfo node,
			AccessibilityNodeInfo rootNode) {
		if (rootNode == null) {
			return;
		}
		NodeInfo nodeInfo = new NodeInfo();
		String id = rootNode.getViewIdResourceName();
		String text = safeCharSeqToString(rootNode.getText());
		nodeInfo.setClassName(safeCharSeqToString(rootNode.getClassName()));
		nodeInfo.setPackageName(safeCharSeqToString(rootNode.getPackageName()));
		Rect curRect = rootNode.getBoundsInScreen();
		nodeInfo.setBouondInScreen(curRect);
		nodeInfo.setNode(rootNode);
		if (Utils.isNullOrBlank(id)) {
			nodeInfo.setId("no id");
		} else {
			nodeInfo.setId(id);
		}
		if (Utils.isNullOrBlank(text)) {
			nodeInfo.setText("no text");
		} else {
			nodeInfo.setText(text);
		}
		nodeInfoList.add(nodeInfo);
		Rect rect = node.getBoundsInScreen();
		if (rect.left == curRect.left && rect.right == curRect.right
				&& rect.top == curRect.top && rect.bottom == curRect.bottom) {
			// if (!Utils.isNullOrBlank(className)
			// && className.equals(curClassName)
			// && !Utils.isNullOrBlank(packageName)
			// && packageName.equals(curPackageName)) {
			curNode = rootNode;
			Logger.i(
					tag,
					"have get current node,id "
							+ rootNode.getViewIdResourceName() + " text: "
							+ safeCharSeqToString(node.getText())
							+ " className: "
							+ safeCharSeqToString(rootNode.getClassName())
							+ " packageName: "
							+ safeCharSeqToString(rootNode.getPackageName())
							+ " boundInScreen: "
							+ rootNode.getBoundsInScreen().toString());
			setId(nodeInfo.getId());
			setText(nodeInfo.getText());
			setClassName(className);
			setPackageName(packageName);
			// }

		}
		int childCount = rootNode.getChildCount();
		// boolean hasNullChild = false;
		for (int i = 0; i < childCount; i++) {
			AccessibilityNodeInfo childNode = rootNode.getChild(i);
			// if (childNode == null) {
			// if (!hasNullChild) {
			// }
			// hasNullChild = true;
			// continue;
			// }
			// if (!childNode.isVisibleToUser()) {
			// continue;
			// }
			setCurrentWindowNodesInfo(node, childNode);
		}

	}

	public AccessibilityNodeInfo getCurrentRootNode(AccessibilityNodeInfo node) {
		AccessibilityNodeInfo currentNode = node;
		if (currentNode == null) {
			return null;
		}
		AccessibilityNodeInfo parent = currentNode.getParent();
		if (parent == null) {
			return currentNode;
		} else {
			AccessibilityNodeInfo rootNode = parent;
			while (parent != null) {
				rootNode = parent;
				parent = parent.getParent();
			}
			return rootNode;
		}
	}

	/**
	 * 根据class name �? boundInScreen两个
	 * 
	 * @param node
	 * @param rootNode
	 */
	public AccessibilityNodeInfo getCurrentNode(AccessibilityNodeInfo node,
			AccessibilityNodeInfo rootNode) {
		AccessibilityNodeInfo curNode = null;
		int size = nodeInfoList.size();
		Rect curRect = node.getBoundsInScreen();
		String curClassName = safeCharSeqToString(node.getClassName());
		String curPackageName = safeCharSeqToString(node.getPackageName());
		if (size > 0) {
			for (NodeInfo nodeInfo : nodeInfoList) {
				Rect rect = nodeInfo.getBouondInScreen();
				String className = nodeInfo.getClassName();
				String packageName = nodeInfo.getPackageName();

				if (rect.left == curRect.left && rect.right == curRect.right
						&& rect.top == curRect.top
						&& rect.bottom == curRect.bottom) {
					// if (!Utils.isNullOrBlank(className)
					// && className.equals(curClassName)
					// && !Utils.isNullOrBlank(packageName)
					// && packageName.equals(curPackageName)) {
					curNode = nodeInfo.getNode();
					Logger.i(
							tag,
							"have get current node,id "
									+ node.getViewIdResourceName()
									+ " text: "
									+ safeCharSeqToString(node.getText())
									+ " className: "
									+ safeCharSeqToString(node.getClassName())
									+ " packageName: "
									+ safeCharSeqToString(node.getPackageName())
									+ " boundInScreen: "
									+ node.getBoundsInScreen().toString());
					setId(nodeInfo.getId());
					setText(nodeInfo.getText());
					setClassName(className);
					setPackageName(packageName);
					return curNode;
					// }

				}
			}
		}
		return curNode;
	}

	public NodeInfo getCurrentNodeInfo(AccessibilityNodeInfo node) {
		int size = this.nodeInfoList.size();
		Rect curRect = node.getBoundsInScreen();
		if (size > 0) {
			for (NodeInfo nodeInfo : this.nodeInfoList) {
				Logger.i(
						tag,
						" node info,id "
								+ nodeInfo.getId()
								+ " text: "
								+ safeCharSeqToString(nodeInfo.getText())
								+ " className: "
								+ safeCharSeqToString(nodeInfo.getClassName())
								+ " packageName: "
								+ safeCharSeqToString(nodeInfo.getPackageName())
								+ " boundInScreen: "
								+ nodeInfo.getBouondInScreen().toString());
				Rect rect = nodeInfo.getBouondInScreen();
				if (rect.left == curRect.left && rect.right == curRect.right
						&& rect.top == curRect.top
						&& rect.bottom == curRect.bottom
						&& node.getClassName().equals(nodeInfo.getClassName())) {
					Logger.i(
							tag,
							" 查询到当前窗�? info,id "
									+ nodeInfo.getId()
									+ " text: "
									+ safeCharSeqToString(nodeInfo.getText())
									+ " className: "
									+ safeCharSeqToString(nodeInfo
											.getClassName())
									+ " packageName: "
									+ safeCharSeqToString(nodeInfo
											.getPackageName())
									+ " boundInScreen: "
									+ nodeInfo.getBouondInScreen().toString());
					setId(nodeInfo.getId());
					setText(nodeInfo.getText());
					setClassName(className);
					setPackageName(packageName);
					return nodeInfo;
					// }

				}
			}
		}
		return null;
	}

	public boolean JudgeIfChildAttrSole() {
		int size = this.nodeInfoList.size();
		Rect curRect = this.curNodeInfo.getBouondInScreen();
		if (size > 0) {
			for (NodeInfo nodeInfo : this.nodeInfoList) {
				Rect rect = nodeInfo.getBouondInScreen();
				if (rect.left >= curRect.left && rect.right <= curRect.right
						&& rect.top >= curRect.top
						&& rect.bottom <= curRect.bottom) {
					if (rect.left == curRect.left
							&& rect.right == curRect.right
							&& rect.top == curRect.top
							&& rect.bottom == curRect.bottom) {
						continue;
					}
					Logger.i(tag, "have get child node,id " + nodeInfo.getId()
							+ " text: " + nodeInfo.getText() + " className: "
							+ nodeInfo.getClassName() + " packageName: "
							+ nodeInfo.getPackageName() + " boundInScreen: "
							+ nodeInfo.getBouondInScreen().toString());
					Logger.i(tag, "判断子控件属性是否唯�?");
					Boolean bFlag = IfWidgetAttrSole(nodeInfo);
					if (bFlag) {
						localType = LOCALTYPE.WIDGETATTR;
						Logger.i(tag,
								"子控件属性唯�?，location type is LOCALTYPE.WIDGETATTR,id: "
										+ nodeInfo.getId() + " text: "
										+ nodeInfo.getText());
						setId(nodeInfo.getId());
						setText(nodeInfo.getText());
						setClassName(className);
						setPackageName(packageName);
						return true;
					}
					Logger.i(tag, "判断子控件属性不唯一");
					// }

				}
			}
		}
		return false;
	}
}
