package com.amen.gospel.service;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONException;

import android.app.Service;
import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.PixelFormat;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.amen.gospel.FloatView;
import com.amen.gospel.R;
import com.amen.gospel.log.Logger;
import com.amen.gospel.model.NodeInfoAction;
import com.amen.gospel.model.RecordInfo;
import com.amen.gospel.runner.UiAutomatorRunner;
import com.amen.gospel.utils.RecordManager;
import com.amen.gospel.utils.Utils;
import com.amen.gospel.utils.Utils.LOCALTYPE;

/**
 * @author syl 20170525 录制服务
 */
public class FloatWindowService extends Service {
	private static final String TAG = "FloatWindowService";
	// 悬浮窗口管理器
	WindowManager mWindowManager;
	// 悬浮窗口参数
	LayoutParams wmParams;
	// 手机屏幕宽
	int sW;
	// 手机屏高
	int sH;
	// 已经录制的元素集合
	public static List<RecordInfo> replayList = new ArrayList<RecordInfo>();
	// 开始按钮
	ImageView startRecord;
	// 结束按钮
	ImageView stopRecord;
	// 回放按钮
	ImageView backRecord;
	// 是否开始录制
	Boolean isStartRecord = false;
	// 是否开始回放
	Boolean isStartPlay = true;
	// 首次加载的悬浮窗口View，灰色背景图片
	View mFloatView;
	// 悬浮菜单View ，有开始，停止，回放
	View mContainView;
	// 设置View
	View mSettingsView;
	// 已经录制的元素信息列表
	ListView listView;
	// 加载悬浮按钮，初始化背景，添加touch监听，在屏幕拖动是同步刷新菜单悬浮按钮
	FloatView mFloatImageView;
	// 首次悬浮按钮加载初始化的参数
	LayoutParams wmFloatParams;
	// 菜单项的加载初始化参数
	LayoutParams wmContainParams;
	// 设置的初始化参数
	LayoutParams wmSettingsParams;
	// 设置项Imange
	ImageView setting;
	// 录制保存脚本名称
	String replayName;
	// 保存的录制脚本名称列表
	List<String> fileList = new ArrayList<String>();
	// 控制是否显示菜单
	public static final float MINDIS = 0.1f;
	// 悬浮按钮的初始化大小
	public int mFloatViewSize;
	// 悬浮按钮的宽
	public int mDisplayWidth;
	// 悬浮按钮移动时候按下的X坐标
	float downX;
	// 悬浮按钮移动时候按下的Y坐标
	float downY;
	// 是否显示SettingView
	private boolean listViewState = false;

	// 悬浮按钮和菜单按钮之间的切换
	Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 0:
				Log.i(TAG, "handler msg");
				mFloatView.setVisibility(View.INVISIBLE);
				mContainView.setVisibility(View.VISIBLE);
				mWindowManager.updateViewLayout(mContainView, wmContainParams);
				break;
			case 1:

				mContainView.setVisibility(View.INVISIBLE);
				mFloatView.setVisibility(View.VISIBLE);
				// mWindowManager.updateViewLayout(mFloatView, wmFloatParams);
				break;

			default:
				break;
			}
		};
	};

	@Override
	public IBinder onBind(Intent intent) {
		// TODO 自动生成的方法存�?
		return null;
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		// TODO 自动生成的方法存�?
		createFloatView();
		// initUi();
		Logger.i(TAG, "onStartCommand,pid:" + android.os.Process.myPid());
		return super.onStartCommand(intent, flags, startId);
	}

	/**
	 * syl 20170525 创建悬浮按钮
	 */
	private void createFloatView() {

		mWindowManager = (WindowManager) getApplication().getSystemService(
				Context.WINDOW_SERVICE);
		// 设备屏幕的宽
		sW = mWindowManager.getDefaultDisplay().getWidth();
		// 设备屏幕的高
		sH = mWindowManager.getDefaultDisplay().getHeight();
		// 悬浮按钮的大小
		mFloatViewSize = getResources().getDimensionPixelSize(
				R.dimen.float_button_view_size);

		// 悬浮按钮初始化参数
		initFloatParams(0, sH / 2);// windowParams
		// 菜单初始化参数
		initContainParams(0, sH / 2);
		// Setting初始化参数
		initSettingsParams(0, sH / 2);

		LayoutInflater inflater = LayoutInflater.from(this);

		// 加载悬浮按钮view，并停靠在手机屏幕左�?
		mFloatView = inflater.inflate(R.layout.float_view, null);
		// 加载悬浮按钮的Layout
		mFloatImageView = (FloatView) mFloatView.findViewById(R.id.float_view);
		// 将悬浮按钮View加载屏幕窗口
		mWindowManager.addView(mFloatView, wmFloatParams);
		// 加载悬浮按钮并显示菜单项,但不显示出来，只有点击后才能看到.初始化INVISIBLE
		mContainView = inflater.inflate(R.layout.float_contain, null);
		// 将菜单加载屏幕窗口,位置正好和悬浮按钮重合，
		mWindowManager.addView(mContainView, wmContainParams);
		// 初始化时隐藏的
		mContainView.setVisibility(View.INVISIBLE);
		// settings
		mSettingsView = inflater.inflate(R.layout.settings, null);
		// 设置列表
		listView = (ListView) mSettingsView.findViewById(R.id.list_settings);
		// 加载菜单对象
		startRecord = (ImageView) mContainView.findViewById(R.id.begin_record);
		stopRecord = (ImageView) mContainView.findViewById(R.id.end_record);
		backRecord = (ImageView) mContainView.findViewById(R.id.paly_record);
		setting = (ImageView) mContainView.findViewById(R.id.setting_contain);
		// 初始化菜单事件
		startRecord.setOnClickListener(new ImageViewClickListener());
		stopRecord.setOnClickListener(new ImageViewClickListener());
		backRecord.setOnClickListener(new ImageViewClickListener());
		setting.setOnClickListener(new ImageViewClickListener());
		// 悬浮按钮的点击事件
		mFloatImageView.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Log.i(TAG, "CLICK IMANGE");
				Message msg = Message.obtain();
				msg.what = 1;
				handler.sendMessage(msg);
			}
		});
	}

	/**
	 * 悬浮按钮初始化
	 * 
	 * @param x
	 * @param y
	 */
	private void initFloatParams(int x, int y) {
		wmFloatParams = new LayoutParams(LayoutParams.WRAP_CONTENT,
				LayoutParams.WRAP_CONTENT);
		wmFloatParams.type = LayoutParams.TYPE_SYSTEM_ALERT;//
		wmFloatParams.format = PixelFormat.RGBA_8888;
		wmFloatParams.flags = LayoutParams.FLAG_NOT_FOCUSABLE;
		wmFloatParams.gravity = Gravity.LEFT | Gravity.TOP;
		wmFloatParams.x = x;
		wmFloatParams.y = y;
		wmFloatParams.width = mFloatViewSize;
		wmFloatParams.height = mFloatViewSize;
		mDisplayWidth = mWindowManager.getDefaultDisplay().getWidth();
	}

	/**
	 * 悬浮菜单按钮初始化
	 * 
	 * @param x
	 * @param y
	 */
	private void initContainParams(int x, int y) {
		wmContainParams = new LayoutParams(LayoutParams.WRAP_CONTENT,
				LayoutParams.WRAP_CONTENT);
		wmContainParams.type = LayoutParams.TYPE_SYSTEM_ALERT;//
		wmContainParams.format = PixelFormat.RGBA_8888;
		wmContainParams.flags = LayoutParams.FLAG_NOT_FOCUSABLE;
		wmContainParams.gravity = Gravity.LEFT | Gravity.TOP;
		wmContainParams.x = x;
		wmContainParams.y = y;
		wmContainParams.width = 350;
		wmContainParams.height = 620;
	}

	/**
	 * 设置录制脚本文件列表View
	 * 
	 * @param x
	 * @param y
	 */
	private void initSettingsParams(int x, int y) {
		wmSettingsParams = new LayoutParams(LayoutParams.WRAP_CONTENT,
				LayoutParams.WRAP_CONTENT);
		wmSettingsParams.type = LayoutParams.TYPE_SYSTEM_ALERT;//
		wmSettingsParams.format = PixelFormat.RGBA_8888;
		wmSettingsParams.flags = LayoutParams.FLAG_NOT_FOCUSABLE;
		wmSettingsParams.gravity = Gravity.LEFT | Gravity.TOP;
		wmSettingsParams.x = sW / 3;
		wmSettingsParams.y = sH / 5;
		wmSettingsParams.width = 600;
		wmSettingsParams.height = 620;
	}

	/**
	 * 悬浮菜单按钮事件实现
	 */
	public class ImageViewClickListener implements OnClickListener {

		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			switch (v.getId()) {
			case R.id.begin_record:// 开始录制
				replayList.clear();
				replayName = "";
				Log.i(TAG, "begin_record");
				Message msg = Message.obtain();
				msg.what = 1;
				handler.sendMessage(msg);
				if (!isStartRecord) {
					// 开始录制提示信息
					Utils.showDialog(FloatWindowService.this, "开始录制...", 1500);
					Logger.i(TAG, "开始录制---------- ");
					// 初始化UiautomatorRunner
					UiAutomatorRunner.getInstance().initialize();
					UiAutomatorRunner.bRecord = true;
					isStartRecord = true;
					UiAutomatorRunner.clickFirst = true;
					RecordManager.recordList.clear();
					// 注册事件监听，初始化与手机的连接
					registerEventListener();
				} else {
					Logger.i(TAG, "已经开始始录了---------- ");
				}
				// 每次录制都从home页面开始
				GotoHome();
				break;
			case R.id.end_record:// 停止录制
				replayName = "";
				Log.i(TAG, "end_record");
				// 通知Handle更新窗口状态
				msg = Message.obtain();
				msg.what = 1;
				handler.sendMessage(msg);
				if (isStartRecord) {
					UiAutomatorRunner.bRecord = false;
					isStartRecord = false;
					UiAutomatorRunner.clickFirst = false;
					Logger.i(TAG, "结束录制---------- ");
				} else {
					Logger.i(TAG, "还未启动录制---------- ");
				}
				Logger.i(TAG, "Record size: " + RecordManager.recordList.size());
				// 把结果写入到文件里面
				try {
					Utils.writeNodeInfoToFile(RecordManager.recordList);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					Logger.i(TAG, "录制数据写入文件是失败: " + e.toString());
				}
				GotoHome();
				// Utils.showDialog(FloatWindowService.this,"结束录制...",1000);
				break;
			case R.id.paly_record:
				Log.i(TAG, "paly_record ");
				// Utils.showDialog(FloatWindowService.this,"�?始回�?...",1000);
				msg = Message.obtain();
				msg.what = 1;
				handler.sendMessage(msg);
				new Thread(new Runnable() {

					@Override
					public void run() {
						// TODO Auto-generated method stub
						if (isStartPlay) {
							isStartPlay = false;
							Logger.i(TAG, "开始回放---------- ");
							// GotoHome();

							// String defaultInputMethod =
							// Settings.Secure.getString(MyApplication.getContext().getContentResolver(),
							// "default_input_method");
							// Logger.i(TAG,
							// "当前默认输入法是---------- "+defaultInputMethod);
							// Settings.Secure.putString(MyApplication.getContext().getContentResolver(),
							// "default_input_method","jp.jun_nama.test.utf7ime/.Utf7ImeService");
							// Logger.i(TAG,
							// "设置默认输入法为---------- "+"jp.jun_nama.test.utf7ime/.Utf7ImeService");
							if (!Utils.isNullOrBlank(replayName)) {
								Logger.i(TAG, "开始回放列表中的脚本--------- ");
								Logger.i(TAG,
										"node个数---------- " + replayList.size());
								RecordManager.runRecords(
										FloatWindowService.this, replayList, 1);
							} else {
								Logger.i(TAG, "开始回放当前录制的脚本---------- ");
								RecordManager.runRecords(
										FloatWindowService.this,
										RecordManager.recordList, 1);
							}

							GotoHome();
							// Logger.i(TAG,
							// "还原默认输入法是---------- "+defaultInputMethod);
							// Settings.Secure.putString(MyApplication.getContext().getContentResolver(),
							// "default_input_method",defaultInputMethod);
							isStartPlay = true;
						} else {
							Logger.i(TAG, "已经在回放---------- ");
						}
					}
				}).start();

				//
				break;
			case R.id.setting_contain:
				if (listViewState) {
					mWindowManager.removeView(mSettingsView);
					listViewState = false;
				} else {
					// 添加Setting到窗口
					addSettingView();
				}

				// Log.i(TAG, "close_contain");
				// msg = Message.obtain();
				// msg.what = 1;
				// handler.sendMessage(msg);
				break;

			default:
				// msg = Message.obtain();
				// msg.what = 1;
				// handler.sendMessage(msg);
				break;
			}
		}

	}

	/**
	 * 显示当前录制的文件列表(需要添加重命名、回放次数功能) syl 20170526
	 */
	public void addSettingView() {

		mWindowManager.addView(mSettingsView, wmSettingsParams);
		listViewState = true;
		String[] data = null;

		fileList.clear();
		// 获取apk所在的文件路径/data/
		String strPath = getApplication().getFilesDir().getPath();
		Logger.i(TAG, "filePath:" + strPath);
		File file = new File(strPath);
		if (file.exists()) {
			File[] files = file.listFiles();
			int j = 0;
			if (files != null) {
				for (int i = 0; i < files.length; i++) {
					if (!files[i].isDirectory()) { // 判断是文件还是文件夹
						if (files[i].getName().endsWith(".json")) {
							fileList.add(files[i].getName()
									.replace(".json", ""));
							j++;
						}
					}
				}
			}
			if (j > 0) {
				data = new String[j];
				for (int k = 0; k < j; k++) {
					data[k] = fileList.get(k);
				}
			} else {
				data = new String[1];
				data[0] = "没有录制的数据";
			}
		}

		// 获取文件列表
		ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, data);
		listView.setAdapter(adapter);
		// listView.setOnClickListener(new Onc)
		listView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				replayName = fileList.get(position);
				Log.i(TAG, "replay name:" + replayName);
				String replayData = Utils.load(getApplicationContext(),
						replayName + ".json");
				Log.i(TAG, "replay data:" + replayData);
				replayList.clear();
				// String tempStringBuf =
				// "[{'action':'ACTION_STARTACTIVITY','packageName':'com.android.settings/com.android.settings.HWSettings'},{'action':'ACTION_CLICK','allowScroll':true,'locationType':'ATTR','id':'id/title','text':'Display'}]";
				// System.out.println(tempStringBuf.toString());
				// if (tempStringBuf != null) {
				Gson gson = new Gson();
				JsonParser jsonParser = new JsonParser();
				JsonArray jsonArray = jsonParser.parse(replayData)
						.getAsJsonArray();
				for (JsonElement jsonElement : jsonArray) {
					// System.out.println(jsonElement.toString());
					Log.i(TAG, "replay node:" + jsonElement.toString());
					NodeInfoAction nodeInfoAction = gson.fromJson(jsonElement,
							NodeInfoAction.class);
					LOCALTYPE localType = null;
					if (nodeInfoAction.getLocationType() == null) {
						localType = LOCALTYPE.NONE;
					} else if (nodeInfoAction.getLocationType().equals(
							"WIDGETATTR")) {
						localType = LOCALTYPE.WIDGETATTR;
					}
					Log.i(TAG, "id:" + nodeInfoAction.getId() + " text:"
							+ nodeInfoAction.getText() + " actionType:"
							+ nodeInfoAction.getAction() + " inputText:"
							+ nodeInfoAction.getInputText() + " LOCALTYPE:"
							+ localType.toString() + " isAllowScroll:"
							+ nodeInfoAction.isAllowScroll() + " packageName:"
							+ nodeInfoAction.getPackageName());
					RecordInfo recordInfo = new RecordInfo(nodeInfoAction
							.getId(), nodeInfoAction.getText(), nodeInfoAction
							.getAction(), nodeInfoAction.getInputText(),
							localType, nodeInfoAction.isAllowScroll(),
							nodeInfoAction.getPackageName());
					replayList.add(recordInfo);
					Log.i(TAG, "replay size:" + replayList.size());

				}
				mWindowManager.removeView(mSettingsView);
				listViewState = false;
				// Message msg = Message.obtain();
				// msg.what = 1;
				// handler.sendMessage(msg);
			}

		});
	}

	@Override
	public void onDestroy() {
		// if (hasAddEat) {
		// mWindowManager.removeView(eatBeanMan);
		// }
		mWindowManager.removeView(mFloatView);
		mWindowManager.removeView(mContainView);
		super.onDestroy();
	}

	/**
	 * 注册事件监听事件
	 * 
	 * @param context
	 * @param params
	 */
	private void registerEventListener() {
		Logger.i(TAG, "registerEventListener!");
		UiAutomatorRunner.getInstance().addListener();
	}

	public void GotoHome() {
		// 隐藏activity到后�?,打开HOME Launcher
		PackageManager pm = getPackageManager();
		ResolveInfo homeInfo = pm.resolveActivity(
				new Intent(Intent.ACTION_MAIN)
						.addCategory(Intent.CATEGORY_HOME), 0);
		ActivityInfo ai = homeInfo.activityInfo;
		Intent startIntent = new Intent(Intent.ACTION_MAIN);
		startIntent.addCategory(Intent.CATEGORY_LAUNCHER);
		startIntent.setComponent(new ComponentName(ai.packageName, ai.name));
		startIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		try {
			startActivity(startIntent);
		} catch (ActivityNotFoundException e) {
			Logger.i(TAG, "not found Activity error=" + e.getMessage());
		} catch (SecurityException e) {
			Logger.i(TAG, "not found Activity error=" + e.getMessage());
			Logger.e(
					TAG,
					"Launcher does not have the permission to launch "
							+ startIntent
							+ ". Make sure to create a MAIN intent-filter for the corresponding activity "
							+ "or use the exported attribute for this activity."
							+ e);
		}
	}

	public void updateViewPosition(int action, float x, float y,
			float mTouchStartX, float mTouchStartY) {
		// boolean isOut = true;
		// if (Math.abs(positionX - startX) < MAXDIS
		// && Math.abs(positionY - startY) < MAXDIS) {
		// isOut = false;
		// }
		int deltaX = (int) (x - mTouchStartX);
		int deltaY = (int) (y - mTouchStartY);
		if (action == MotionEvent.ACTION_DOWN) {
			downX = x;
			downY = y;

			Log.i(TAG, "down X:" + downX);
			Log.i(TAG, "down Y:" + downY);
		} else if (action == MotionEvent.ACTION_MOVE) {
			wmFloatParams.x = deltaX;
			wmFloatParams.y = deltaY;
			mWindowManager.updateViewLayout(mFloatView, wmFloatParams);
			Log.i(TAG, "move deltaX:" + Math.abs(x - mTouchStartX));
			Log.i(TAG, "move deltaY:" + Math.abs(y - mTouchStartY));
		} else if (action == MotionEvent.ACTION_UP) {

			wmFloatParams.y = deltaY;
			if (x < mDisplayWidth / 2) {
				wmFloatParams.x = 0;
			} else {
				wmFloatParams.x = mDisplayWidth;
			}
			mWindowManager.updateViewLayout(mFloatView, wmFloatParams);
			wmContainParams.x = wmFloatParams.x;
			wmContainParams.y = wmFloatParams.y;
			Log.i(TAG, "up deltaX:" + Math.abs(downX - x));
			Log.i(TAG, "up deltaY:" + Math.abs(downY - y));
			if (Math.abs(downX - x) < MINDIS && Math.abs(downY - y) < MINDIS) {
				// 认为是点击事件，弹出contain窗口
				Log.i(TAG, "弹出contain窗口");
				Message msg = Message.obtain();
				msg.what = 0;
				handler.sendMessage(msg);
			}
		}

	}
}
